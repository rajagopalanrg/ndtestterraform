name: 'Terraform'

on:
  push:
    branches:
      - "*"
  workflow_dispatch:
    inputs:
      subscriptionId:
        description: "Subscription ID"
        required: true
      candidateName:
        description: "Candidate Name"
        required: false
        default: "Rajagopalan"


jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ github.event.inputs.subscriptionId}}
        ARM_STORAGE_KEY: ${{ secrets.ARM_STORAGEKEY }}
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -var-file=variables.tfvars --backend-config="key=${{ github.event.inputs.candidateName }}-state.tfstate"

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var-file=variables.tfvars

    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'push'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization \`${{ steps.init.outcome }}\`
          #### Terraform Plan \`${{ steps.plan.outcome }}\`
          #### Terraform Validation \`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

